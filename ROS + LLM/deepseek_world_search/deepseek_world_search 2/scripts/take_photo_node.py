#!/usr/bin/env python3
import rospy
import cv2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError

class TakePhotoNode:
    def __init__(self):
        rospy.init_node('take_photo_node', anonymous=False)

        self.bridge = CvBridge()
        self.image_received = False
        self.image = None

        img_topic = "/camera/rgb/image_raw"
        rospy.Subscriber(img_topic, Image, self.image_callback)

        rospy.loginfo("üé• ‡∏£‡∏≠‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á...")
        rospy.sleep(2)  # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á

        # Image title (‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å parameter ‡∏´‡∏£‡∏∑‡∏≠ default)
        self.img_title = rospy.get_param('~image_title', 'bowl.jpg')

        # ‡∏£‡∏≠‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏†‡∏≤‡∏û
        rate = rospy.Rate(10)
        timeout = rospy.Time.now() + rospy.Duration(10)  # 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        while not self.image_received and rospy.Time.now() < timeout:
            rospy.loginfo_throttle(2, "üì∑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏†‡∏≤‡∏û...")
            rospy.sleep(0.5)

        if self.image_received:
            cv2.imwrite(self.img_title, self.image)
            rospy.loginfo(f"‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏†‡∏≤‡∏û‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {self.img_title}")
        else:
            rospy.logwarn("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á")

    def image_callback(self, data):
        try:
            self.image = self.bridge.imgmsg_to_cv2(data, "bgr8")
            self.image_received = True
        except CvBridgeError as e:
            rospy.logerr(f"‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")

if __name__ == '__main__':
    try:
        TakePhotoNode()
    except rospy.ROSInterruptException:
        pass
